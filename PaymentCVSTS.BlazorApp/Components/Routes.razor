@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization

<Router AppAssembly="typeof(Program).Assembly">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="typeof(Layout.MainLayout)">
            <NotAuthorized>
                @if (context.User.Identity?.IsAuthenticated != true)
                {
                    <RedirectToLogin />
                }
                else
                {
                    <RedirectToAccessDenied />
                }
            </NotAuthorized>
        </AuthorizeRouteView>
        <FocusOnNavigate RouteData="routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="typeof(Layout.MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    // This component handles redirection to the login page when a user
    // is not authenticated but tries to access a protected resource
    private class RedirectToLogin : ComponentBase
    {
        [Inject]
        private NavigationManager Navigation { get; set; } = default!;

        protected override void OnInitialized()
        {
            Navigation.NavigateTo($"/Account/Login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}", true);
        }
    }

    // This component handles redirection to the access denied page when an
    // authenticated user tries to access a resource they're not authorized for
    private class RedirectToAccessDenied : ComponentBase
    {
        [Inject]
        private NavigationManager Navigation { get; set; } = default!;

        protected override void OnInitialized()
        {
            Navigation.NavigateTo("/Account/AccessDenied", true);
        }
    }
}