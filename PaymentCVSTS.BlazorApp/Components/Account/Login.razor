@page "/Account/Login"
@page "/Account/Login/{fresh}"
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject IAntiforgery Antiforgery
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@attribute [AllowAnonymous]

<PageTitle>Login - Payment System</PageTitle>

<div class="row justify-content-center mt-5">
    <div class="col-md-5">
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h3 class="text-center mb-0">Login</h3>
            </div>
            <div class="card-body p-4">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @errorMessage
                        <button type="button" class="btn-close" @onclick="ClearError" aria-label="Close"></button>
                    </div>
                }

                <form action="/api/account/login" method="post" @onsubmit="PreventDefaultSubmit">
                    <input name="__RequestVerificationToken" type="hidden" value="@requestToken" />

                    @if (!string.IsNullOrEmpty(returnUrl))
                    {
                        <input type="hidden" name="returnUrl" value="@returnUrl" />
                    }

                    <div class="form-group mb-3">
                        <label class="form-label">Username</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-person-fill"></i></span>
                            <input type="text" class="form-control" name="username" value="@loginModel.Username"
                                   @oninput="(e) => loginModel.Username = e.Value?.ToString()" required />
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <label class="form-label">Password</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-lock-fill"></i></span>
                            <input type="password" class="form-control" name="password" value="@loginModel.Password"
                                   @oninput="(e) => loginModel.Password = e.Value?.ToString()" required />
                        </div>
                    </div>

                    <div class="d-grid gap-2 mt-4">
                        <button type="submit" class="btn btn-primary" @onclick="SubmitForm">
                            <i class="bi bi-box-arrow-in-right me-2"></i>Login
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? fresh { get; set; }
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;
    private string? requestToken;
    private ElementReference formRef;
    private string? returnUrl;

    protected override void OnInitialized()
    {
        // Get return URL if any
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }

        // If coming from logout (with fresh parameter)
        if (fresh == "true")
        {
            // Force a new antiforgery token
            var token = Antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext);
            requestToken = token.RequestToken;
        }
        else
        {
            // Normal initialization
            var token = Antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext);
            requestToken = token.RequestToken;
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("error", out var error))
        {
            errorMessage = error == "InvalidCredentials"
                ? "Invalid username or password"
                : "An error occurred during login";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Generate a fresh token on every page load
            var tokens = Antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext);
            requestToken = tokens.RequestToken;

            // Force the component to re-render with the new token
            StateHasChanged();
        }
    }

    private void PreventDefaultSubmit(EventArgs e)
    {
        // This prevents the default browser form submission
        // We'll handle it explicitly in the SubmitForm method
    }

    private async Task SubmitForm()
    {
        // Submit the form programmatically
        await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('form').submit();");
    }

    private void ClearError()
    {
        errorMessage = null;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}