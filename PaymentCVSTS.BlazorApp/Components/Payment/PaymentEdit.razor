@page "/Payment/PaymentEdit/{id:int}"
@using PaymentCVSTS.Services.Interfaces
@inject IPaymentService paymentService
@inject IAppointmentService appointmentService
@attribute [Authorize(Policy = "RequireAdminRole")]

<PageTitle>Edit Payment</PageTitle>

<h3>Edit Payment</h3>

@if (payment == null)
{
    <div class="d-flex justify-content-center">
        <p>Loading...</p>
    </div>
}
else
{
    <EditForm Model="payment" OnValidSubmit="UpdatePayment">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Payment ID</label>
                    <InputNumber class="form-control" @bind-Value="payment.PaymentId" disabled />
                </div>

                <div class="mb-3">
                    <label class="form-label">Amount</label>
                    <InputNumber class="form-control" @bind-Value="payment.Amount" required />
                    @if (!string.IsNullOrEmpty(amountError))
                    {
                        <div class="text-danger">@amountError</div>
                    }
                </div>

                <div class="mb-3">
                    <label class="form-label">Payment Status</label>
                    <select class="form-control" @bind="payment.PaymentStatus">
                        <option value="Pending">Pending</option>
                        <option value="Completed">Completed</option>
                        <option value="Failed">Failed</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">Payment Method</label>
                    <select class="form-control" @bind="payment.PaymentMethod">
                        <option value="Cash">Cash</option>
                        <option value="Credit Card">Credit Card</option>
                        <option value="Debit Card">Debit Card</option>
                        <option value="Bank Transfer">Bank Transfer</option>
                        <option value="Mobile Payment">Mobile Payment</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">Payment Date</label>
                    <InputDate class="form-control" @bind-Value="payment.PaymentDate" />
                    @if (!string.IsNullOrEmpty(dateError))
                    {
                        <div class="text-danger">@dateError</div>
                    }
                </div>
            </div>

            <div class="col-md-6">
                @if (appointment != null)
                {
                    <div class="card">
                        <div class="card-header">
                            <h6>Appointment Details</h6>
                        </div>
                        <div class="card-body">
                            <p><strong>Appointment ID:</strong> @appointment.AppointmentId</p>
                            <p><strong>Booking Date:</strong> @appointment.BookingDate.ToString("yyyy-MM-dd HH:mm")</p>
                            <p><strong>Service Type:</strong> @appointment.ServiceType</p>
                            <p><strong>Total Cost:</strong> @appointment.TotalCost.ToString("C")</p>
                            <p><strong>Status:</strong> @appointment.Status</p>
                            <p><strong>Payment Status:</strong> @appointment.PaymentStatus</p>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Payment? payment;
    private Appointment? appointment;
    private string errorMessage = "";
    private string amountError = "";
    private string dateError = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            payment = await paymentService.GetById(Id);

            if (payment != null)
            {
                appointment = await appointmentService.GetById(payment.AppointmentId);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading payment: {ex.Message}";
        }
    }

    private async Task UpdatePayment()
    {
        if (payment != null)
        {
            // Reset error messages
            amountError = "";
            dateError = "";
            errorMessage = "";

            bool isValid = true;

            // Check if amount is missing or not greater than 0
            if (payment.Amount <= 0)
            {
                amountError = "Amount must be greater than 0";
                isValid = false;
            }

            // Check if payment date is valid
            if (payment.PaymentDate == default)
            {
                dateError = "Payment date is required";
                isValid = false;
            }
            // Check if payment date is not before booking date
            else if (appointment != null)
            {
                var bookingDateOnly = DateOnly.FromDateTime(appointment.BookingDate.Date);
                if (payment.PaymentDate < bookingDateOnly)
                {
                    dateError = "Payment date cannot be before booking date";
                    isValid = false;
                }
            }

            if (isValid)
            {
                try
                {
                    await paymentService.Update(payment);
                    nav.NavigateTo("/Payment/PaymentList");
                }
                catch (Exception ex)
                {
                    errorMessage = $"Error updating payment: {ex.Message}";
                }
            }
        }
    }

    private void GoBack()
    {
        nav.NavigateTo("/Payment/PaymentList");
    }
}